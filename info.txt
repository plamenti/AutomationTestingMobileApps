Intel HAXM
Android v 4.3+
Mac Mini, Mac Book or other Apple hardware
Add Mac VM?

Check for Mac mini
Check for Mac Pro

HAXM is installed in <ANDROID_HOME>\extras

INSTALL ANDROID SDK:
1. Download .zip file with Android SDK
2. Unzip the .zip file in some folder
3. Set up ANDROID_HOME env variable
4. To install e.g. android-23:
	(In file yes.txt is only one char Y. If you want to use this approach the CMD should be opened in the same folder with file yes.txt or the full path to the yes.txt file)
	4.1 In the folder with .zip file open the CMD
	%ANDROID_HOME%\tools\bin\sdkmanager "tools" < yes.txt
	%ANDROID_HOME%\tools\bin\sdkmanager "build-tools;27.0.3" < yes.txt
	%ANDROID_HOME%\tools\bin\sdkmanager "build-tools;26.0.3" < yes.txt
	%ANDROID_HOME%\tools\bin\sdkmanager "build-tools;25.0.3" < yes.txt
	%ANDROID_HOME%\tools\bin\sdkmanager "build-tools;23.0.1" < yes.txt
	%ANDROID_HOME%\tools\bin\sdkmanager "emulator" < yes.txt
	%ANDROID_HOME%\tools\bin\sdkmanager "extras;android;m2repository" < yes.txt
	%ANDROID_HOME%\tools\bin\sdkmanager "extras;google;m2repository" < yes.txt
	4.2 In CMD type %ANDROID_HOME%\tools\bin\sdkmanager "platforms;android-23" < yes.txt (In file yes.txt is only one char Y. If you want to use this approach the CMD should be opened in the same folder with file yes.txt or the full path to the yes.txt file)
5. To update the image:
	In CMD type %ANDROID_HOME%\tools\bin\sdkmanager "system-images;android-23;default;x86"
	
	If warning ".... .repositories.cfg ....." is displayed:
	Go to .android and create .repositories.cfg file (empty)
6. To create emulator:
	In CMD type %ANDROID_HOME%\tools\bin\avdmanager create avd -n Emulator-Api23-Default -k "system-images;android-23;default;x86" -b default/x86 -c 12M -f < Enter.txt (In file Enter.txt is added Enter. By hand just click Enter)
7. Install HAXM:
	In CMD type:
	echo "y" | %ANDROID_HOME%\tools\bin\sdkmanager "extras;intel;Hardware_Accelerated_Execution_Manager"
	set current_dir=%CD%
	cd %ANDROID_HOME%\extras\intel\Hardware_Accelerated_Execution_Manager
	silent_install.bat || ver>nul
	cd %current_dir%
	
	This does not install the emulator. 
	
8. TO check if the Emulator s created:
	Navigate to C:\Users\<your_ser>\.android\avd
	If there is some folder with the name of the emulator (if this tut is followed should be Emulator-Api23-Default)
	
9. Navigate to C:\Users\<your_ser>\.android\avd\Emulator-Api23-Default
	In file config.ini paste (Concatenate! This data is taken from Session 2\setup-windows\config find the wanted .ini file):
	PlayStore.enabled=false
	abi.type=x86
	avd.ini.encoding=UTF-8
	hw.cpu.arch=x86
	hw.sdCard=yes
	image.sysdir.1=system-images/android-23/default/x86/
	sdcard.size=12M
	tag.display=
	tag.id=default
	hw.lcd.density=240
	skin.name=480x800
	hw.gpu.enabled=yes
	hw.keyboard=no
	
10. To tun the emulator
	%ANDROID_HOME%\tools\emulator -avd Emulator-Api23-Default
	
Android Debug Bridge (adb) is a versatile command-line tool that lets you communicate with a device - https://developer.android.com/studio/command-line/adb
	
To list all packages:
%ANDROID_HOME%/platform-tools/adb shell pm list packages

To list only 3:
%ANDROID_HOME%/platform-tools/adb shell pm list packages -3

To list package, that contains some name:
%ANDROID_HOME%/platform-tools/adb shell pm list packages -f 'some name'

To simulate hard reset add -wipe-data at the end of the line that boots the emulator:
%ANDROID_HOME%\tools\emulator -avd Emulator-Api23-Default -wipe-data

To disable the Quick Boot feature completely â€” it does not load or save the emulator state:
%ANDROID_HOME%\tools\emulator -avd Emulator-Api23-Default -no-snapshot

To perform a cold boot, and save the emulator state on exit:
%ANDROID_HOME%\tools\emulator -avd Emulator-Api23-Default -no-snapshot-load

To perform a quick boot if possible, but without saving the emulator state on exit: 
%ANDROID_HOME%\tools\emulator -avd Emulator-Api23-Default -no-snapshot-save

More startup options - https://developer.android.com/studio/run/emulator-commandline#startup-options
Command line options - https://developer.android.com/studio/run/emulator-commandline
More command line options - https://gist.github.com/JonathanLalou/180c87554d8278b0e6d7

To start some app in Android emulator or device:
adb shell monkey -p app.package.name -c android.intent.category.LAUNCHER 1 
	- This command simulates the app icon click, so the intent implicit intent LAUNCHER is delivered to the specific receiver declared in app manifest (MAIN)

Send commands to a specific device (in this example with id 5555. -s overrides $ANDROID_SERIAL environment variable ):
$ adb devices
	List of devices attached
	emulator-5554 device
	emulator-5555 device
$ adb -s emulator-5555 install helloWorld.apk
	If you have multiple devices available, but only one is an emulator, use the -e option to send commands to the emulator. Likewise, if there are multiple devices but only one hardware device attached, use the -d option to send commands to the hardware device
	
Install an app ():
$ adb install path_to_apk
	
Copy files to/from a device:
$ adb pull remote local - to copy a file or directory and its sub-directories from the device
$ adb push local remote - To copy a file or directory and its sub-directories to the device
	Replace local and remote with the paths to the target files/directory on your development machine (local) and on the device (remote). For example:
	$ adb push foo.txt /sdcard/foo.txt

To start an application using android ADB tools:
$ adb shell am start -n com.package.name/com.package.name.ActivityName

To specify actions to be filtered by your intent-filters:
$ adb shell am start -a com.example.ACTION_NAME -n com.package.name/com.package.name.ActivityName

For linux/mac users - can also create a script to run an apk with something like the following:
	create a file named "adb-run.sh" with these 3 lines:
pkg=$(aapt dump badging $1|awk -F" " '/package/ {print $2}'|awk -F"'" '/name=/ {print $2}')
act=$(aapt dump badging $1|awk -F" " '/launchable-activity/ {print $2}'|awk -F"'" '/name=/ {print $2}')
adb shell am start -n $pkg/$act
	then "chmod +x adb-run.sh" to make it executable.
	now you can simply:
adb-run.sh myapp.apk
	This requires that you have aapt in your path. You can find it under the new build tools folder in the SDK.

To run/start application specifying package name only using monkey tool by follow this pattern:
$ adb shell monkey -p your.app.package.name -c android.intent.category.LAUNCHER 1
	Command is used to run app using monkey tool which generates random input for application. The last part of command is integer which specify the number of generated random input for app. In this case the number is 1, which in fact is used to launch the app (icon click)


To get appPackage name and appActivity name in Windows and run the app (Use in Powershell)

$pathToApk = "D:\Downloads\selendroid-test-app-0.11.0.apk"
$dump =  & $Env:ANDROID_HOME\build-tools\27.0.3\aapt.exe dump badging $pathToApk
$pkg = $dump -match "package: name=" | %{$_ -Split("'")} | Select-Object -Skip 1 | Select-Object -First 1
$act = $dump -match "launchable-activity: name=" | %{$_ -Split("'")} | Select-Object -Skip 1 | Select-Object -First 1
& $Env:ANDROID_HOME\platform-tools\adb.exe shell am start -n $pkg/$act

To get appPackage name and appActivity name in Unix/Linux and run the app
pkg=$(aapt dump badging $1|awk -F" " '/package/ {print $2}'|awk -F"'" '/name=/ {print $2}')
act=$(aapt dump badging $1|awk -F" " '/launchable-activity/ {print $2}'|awk -F"'" '/name=/ {print $2}')
adb shell am start -n $pkg/$act
